#include <stdio.h>
#include <stdbool.h>

#define N 9 


void printGrid(int grid[N][N]);
bool isSafe(int grid[N][N], int row, int col, int num);
bool solveSudoku(int grid[N][N]);
bool findUnassignedLocation(int grid[N][N], int *row, int *col);
bool usedInRow(int grid[N][N], int row, int num);
bool usedInCol(int grid[N][N], int col, int num);
bool usedInBox(int grid[N][N], int boxStartRow, int boxStartCol, int num);


void printGrid(int grid[N][N]) {
    for (int row = 0; row < N; row++) {
        for (int col = 0; col < N; col++) {
            if (col % 3 == 0 && col != 0) {
                printf("| ");
            }
            printf("%d ", grid[row][col]);
        }
        printf("\n");
        if ((row + 1) % 3 == 0 && row != N - 1) {
            printf("---------------------\n");
        }
    }
}


bool isSafe(int grid[N][N], int row, int col, int num) {
    return !usedInRow(grid, row, num) &&
           !usedInCol(grid, col, num) &&
           !usedInBox(grid, row - row % 3, col - col % 3, num);
}


bool usedInRow(int grid[N][N], int row, int num) {
    for (int col = 0; col < N; col++) {
        if (grid[row][col] == num) {
            return true;
        }
    }
    return false;
}


bool usedInCol(int grid[N][N], int col, int num) {
    for (int row = 0; row < N; row++) {
        if (grid[row][col] == num) {
            return true;
        }
    }
    return false;
}


bool usedInBox(int grid[N][N], int boxStartRow, int boxStartCol, int num) {
    for (int row = 0; row < 3; row++) {
        for (int col = 0; col < 3; col++) {
            if (grid[row + boxStartRow][col + boxStartCol] == num) {
                return true;
            }
        }
    }
    return false;
}


bool findUnassignedLocation(int grid[N][N], int *row, int *col) {
    for (*row = 0; *row < N; (*row)++) {
        for (*col = 0; *col < N; (*col)++) {
            if (grid[*row][*col] == 0) {
                return true;
            }
        }
    }
    return false;
}


bool solveSudoku(int grid[N][N]) {
    int row, col;

    
    if (!findUnassignedLocation(grid, &row, &col)) {
        return true;
    }

    
    for (int num = 1; num <= 9; num++) {
    
        if (isSafe(grid, row, col, num)) {
            grid[row][col] = num;

            
            if (solveSudoku(grid)) {
                return true;
            }

            
            grid[row][col] = 0;
        }
    }
    return false; 
}


int main() {
    int grid[N][N] = {
        {5, 3, 0, 0, 7, 0, 0, 0, 0},
        {6, 0, 0, 1, 9, 5, 0, 0, 0},
        {0, 9, 8, 0, 0, 0, 0, 6, 0},
        {8, 0, 0, 0, 6, 0, 0, 0, 3},
        {4, 0, 0, 8, 0, 3, 0, 0, 1},
        {7, 0, 0, 0, 2, 0, 0, 0, 6},
        {0, 6, 0, 0, 0, 0, 2, 8, 0},
        {0, 0, 0, 4, 1, 9, 0, 0, 5},
        {0, 0, 0, 0, 8, 0, 0, 7, 9}
    };

    printf("Original Sudoku Grid:\n");
    printGrid(grid);

    if (solveSudoku(grid)) {
        printf("\nSolved Sudoku Grid:\n");
        printGrid(grid);
    } else {
        printf("\nNo solution exists\n");
    }

    return 0;
}

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            map.put(nums[i], i);
        }
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement) && map.get(complement) != i) {
                return new int[] { i, map.get(complement) };
            }
        }
        return new int[] {};
    }
}
class Solution {
    // Add Two Numbers (Java improved)
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode dummyHead = new ListNode(0);
        ListNode curr = dummyHead;
        int carry = 0;
        while (l1 != null || l2 != null || carry != 0) {
            int x = (l1 != null) ? l1.val : 0;
            int y = (l2 != null) ? l2.val : 0;
            int sum = carry + x + y;
            carry = sum / 10;
            curr.next = new ListNode(sum % 10);
            curr = curr.next;
            if (l1 != null) l1 = l1.next;
            if (l2 != null) l2 = l2.next;
        }
        return dummyHead.next;
    }
}

import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int num1=sc.nextInt();
        int num2=sc.nextInt();
        int gcd=0;
        for(int itr=1;itr<=num1&&itr<=num2;itr++)
        {
            if(num1%itr ==0 &num2%itr==0)
            {
                gcd =itr;
            }
        }
            System.out.println(gcd);
         
        
    }
}

import java.util.Scanner;
public class Main{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int num1=sc.nextInt();
        int a[10];
        if(num1<num2){
           min=num1;
        }
        else{
           min=num2;
        }
        for(int i=1;i<=min;i++){
            if(num1%i==0  && num2%i==0){
               gcd=i;
            }
        }
         System.out.printf(gcd);
    }
}
import java.util.Scanner;                                       
public class Main{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int num1=sc.nextInt();
        int count=0;
        int range=(int)Math.sqrt(num1);
        if(num1<2){
            System.out.println("not a prime number\n");
        }
        for(int i=2;i<=range;i++){
            if(num1%i==0){
               count++;
            }
        }
        if(count==2){
           System.out.println("prime");
        }   
        else{
           System.out.println("not prime");
        }
    }
}


OR

import java.util.Scanner;
public class Main{
    public static void main(String[] args){
        Scanner sc=new Scanner(System.in);
        int num1=sc.nextInt();
        int count=0;
        for(int i=2;i<=num1/2;i++){
            if(num1%i==0){
               count++;
            }
        }
        if(count==2){
           System.out.println("prime");
        }   
        else{
           System.out.println("not prime");
        }
    }
}


import java.util.Scanner;
public class Main{
    public static void main(String[] args){
         Scanner scanner=new Scanner(System.in);
         int num1=sc.nextInt();
         int count=0;
         int flag=0;
         int range=(int)math.sqrt(num1);
         if(num1<2)
         {
             flag=0;
         }
         for(int i=2;i<=range;i++)
         {
             if(num1%i==0)
              {
                 count++;
                 flag=1;
              }
         }
         if(count<=0 && flag==1)
         {
              System.out.println("prime");
          }
         else
         {
              System.out.println("not prime");
          }
   }
}

